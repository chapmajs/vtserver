head	1.4;
access;
symbols;
locks
	wkt:1.4; strict;
comment	@# @;


1.4
date	2001.03.23.10.41.29;	author wkt;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.30.03.22.23;	author mhol;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.21.05.55.18;	author mhol;	state Exp;
branches;
next	1.1;

1.1
date	2001.01.21.05.51.45;	author mhol;	state Exp;
branches;
next	;


desc
@coped from vtserver 1.1 src tree
@


1.4
log
@added/modified code to pass csr and maj/min to boot
@
text
@/ Hand-entered code to load the first record off the virtual tape.
/ Copyright 1998/2000 Warren Toomey	wkt@@cs.adfa.edu.au
/ Space optimised by John Holden at Sydney Uni

/ The following registers are used:
/	r0 holds the char to be sent or received
/	r1 holds the address of KL11 unit 1
/	r2 holds the count, from 0 to 512
/	r3 holds the base (where the next data char is to go)
/	r5 is used data pointer for outputing words

.. = 140000

.text

start:
	mov	pc,sp		/ Initialise the stack pointer
	clr	r3		/ Set the base to zero
	mov	$177560, r1	/ Set the base address of KL11 unit 1

outblk:
	mov	$datalst,r4	/ get data list
1:
	movb	(r4)+,r0	/ get item
	bmi	3f		/ list done
2:
	tstb	4(r1)		/ test ready bit
	bpl     2b		/ do nothing
	movb    r0,6(r1)	/ output character
	br	1b		/ and loop for next byte
3:
	inc	block		/ bump clock counter

	jsr	pc, getc	/ get the reply
	beq	4f		/ If not zero, jump to address 0, i.e exit
	mov	$6400, r3	/ All done, set boot device to 13,0
	clr	pc		/ and jump to location 0

4:
	mov 	$1000, r2	/ Set count to 512
5:
	jsr	pc, getc	/ Get a data character
	movb	r0, (r3)+	/ Save at base and increment it
	dec	r2		/ Decrement data count
	bne	5b		/ and loop if any left to get
	br	outblk		/ End of data, go back and get another block

getc:
	tstb	(r1)		/ test for ready bit
	bpl     getc		/ do nothing
	movb    2(r1),r0	/ get character
	rts	pc

.data
datalst:
	.byte	31.		/ command bytes
	.byte	42.		/ command bytes
	.byte	0		/ boot command
	.byte	0		/ record number
block:	0			/ block number
	-1			/ end of data marker. Assumes that there are
				/ never more than 127 boot blocks
@


1.3
log
@switched to the console KL-11
@
text
@d7 1
a7 1
/	r1 holds the base (where the next data char is to go)
d9 1
a9 1
/	r3 holds the address of KL11 unit 1
d12 1
a12 1
.. = 70000
d18 2
a19 2
	clr	r1		/ Set the base to zero
	mov	$177560, r3	/ Set the base address of KL11 unit 1
d27 1
a27 1
	tstb	4(r3)		/ test ready bit
d29 1
a29 1
	movb    r0,6(r3)	/ output character
d36 2
a37 1
	clr	pc
d43 1
a43 1
	movb	r0, (r1)+	/ Save at base and increment it
d49 1
a49 1
	tstb	(r3)		/ test for ready bit
d51 1
a51 1
	movb    2(r3),r0	/ get character
@


1.2
log
@new e-mail address
@
text
@d19 1
a19 1
	mov	$176500, r3	/ Set the base address of KL11 unit 1
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
/ Copyright 1998 Warren Toomey	wkt@@cs.adfa.oz.au
@
